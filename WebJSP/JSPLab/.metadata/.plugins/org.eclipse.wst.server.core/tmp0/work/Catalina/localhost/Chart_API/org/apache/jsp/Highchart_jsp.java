/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.26
 * Generated at: 2019-11-05 11:17:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Highchart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("   <meta charset=\"UTF-8\">\r\n");
      out.write("   <TITLE>Chart</TITLE>\r\n");
      out.write("   \r\n");
      out.write("    <script src=\"//code.jquery.com/jquery-1.12.0.min.js\"></script>\r\n");
      out.write("   <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n");
      out.write("   <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("$(function () {\r\n");
      out.write("      var SUB_STA_NM=[];\r\n");
      out.write("      var RIDE_PASGR_NUM=[];\r\n");
      out.write("      var ALIGHT_PASGR_NUM=[];\r\n");
      out.write("      $.getJSON(\r\n");
      out.write("            \"20160322bundang.json\"\r\n");
      out.write("             ,function(data){\r\n");
      out.write("                $.each(data.DATA,function(index,obj){\r\n");
      out.write("                    SUB_STA_NM.push(obj.SUB_STA_NM);\r\n");
      out.write("                    RIDE_PASGR_NUM.push(parseInt(obj.RIDE_PASGR_NUM));\r\n");
      out.write("                    ALIGHT_PASGR_NUM.push(parseInt(obj.ALIGHT_PASGR_NUM));\r\n");
      out.write("                 });\r\n");
      out.write("      \r\n");
      out.write("       $('#highchart').highcharts({        //차트형식\r\n");
      out.write("           chart: {\r\n");
      out.write("               type: 'line'\r\n");
      out.write("           },\r\n");
      out.write("           title: {                    //차트주제\r\n");
      out.write("               text: '2016년 3월 22일 분당선 역별 승하차 인원수 '\r\n");
      out.write("           },\r\n");
      out.write("        \r\n");
      out.write("           xAxis: {            //x축 내용\r\n");
      out.write("               categories:  SUB_STA_NM,\r\n");
      out.write("               crosshair:{\r\n");
      out.write("                   color: 'lightgreen',\r\n");
      out.write("                   width:3\r\n");
      out.write("               }\r\n");
      out.write("           },\r\n");
      out.write("           yAxis: {            //y 축내용\r\n");
      out.write("               min: 0,\r\n");
      out.write("               title: {\r\n");
      out.write("                   text: '(명)'\r\n");
      out.write("               }\r\n");
      out.write("           },\r\n");
      out.write("           \r\n");
      out.write("           legend: {        //범례\r\n");
      out.write("               layout: 'vertical',\r\n");
      out.write("               align: 'right',\r\n");
      out.write("               verticalAlign: 'middle'\r\n");
      out.write("               \r\n");
      out.write("           },\r\n");
      out.write("           \r\n");
      out.write("           tooltip: {        //말풍선\r\n");
      out.write("               headerFormat: '<span style=\"font-size:15px\">{point.key}</span>',\r\n");
      out.write("               pointFormat: '<table><tr><td style=\"color:{series.color}\">{series.name}: </td>' +\r\n");
      out.write("                   '<td><b>{point.y:f} 명</b></td></tr></table>',\r\n");
      out.write("               shared: true,\r\n");
      out.write("               useHTML: true\r\n");
      out.write("           },\r\n");
      out.write("        \r\n");
      out.write("           series: [{\r\n");
      out.write("               name: '하차 인원',\r\n");
      out.write("               data:  ALIGHT_PASGR_NUM\r\n");
      out.write(" \r\n");
      out.write("           }, {\r\n");
      out.write("               name: '승차인원',\r\n");
      out.write("               data:  RIDE_PASGR_NUM\r\n");
      out.write(" \r\n");
      out.write("           }]\r\n");
      out.write("       });\r\n");
      out.write("   });\r\n");
      out.write("});\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   \r\n");
      out.write("<div id=\"highchart\" style=\"min-width: 500px; height: 500px; margin: 0 auto\"></div>\r\n");
      out.write(" \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

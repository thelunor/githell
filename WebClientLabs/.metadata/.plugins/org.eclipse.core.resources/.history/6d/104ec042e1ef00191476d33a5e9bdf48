<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Insert title here</title>
	<script type="text/javascript">
	/*
	  자바 설계도(클래스) => 재사용성
	  class Product{
	   private String carname="pony";
	   
	   public Product(){}
	   public Product(String carname){
	    this.carname= carname;
	   }
	   public void print(){
	    System.out.println(this.carname);
	   }
	  }
	 
	    메모리 load ... (new)
	  Product p = new Product();
	  Product p2 = new Product("pony2");
	  p.print();
	  p2.print();
	  /////////////////////////////////////////////////////
	  javaScript >> 객체지향언어(OOP)
	  
	  클래스 정의 3가지 방법

	  1. 프로토타입 방식 : 일반적인 클래스 제작 방법
			인스턴스마다 공통된 메서드를 공유해서 사용하는 장점
			Jquery 도 prototype 방식으로 설계


	  2. 함수 방식 : 간단한 클래스 제작 시 사용 
			인스턴스마다 메서드가 독립적으로 만들어지는 단점

	*** 중요 ***
	  3. 리터럴 방식(JSON: JavaScript Object Notation.): 클래스 만드는 용도는 아니며 주로 여러 개의 매개변수를 그룹으로 묶어 함수의 매개변수로 보낼 때
														정의와 함께 인스턴스가 만들어지는 장점이 있음(단, 인스턴스는 오직 하나)
			(초보자에게도 중요 ^^)
			JSON 객체 데이터 교환 역할()
	     
	  
	  4. ECMA6(ES6) 버전부터 : class 키워드 제공
	      class Person {
	         constructor(name) { // 생성자 키워드
	           this._name = name; // this: Person
	         }
	 
	         sayHi() {
	           console.log(`Hi! ${this._name}`);
	         }
	       }
	     
	 [ javascript 객체 생성 ]
	 1.오브젝트 리터럴 방식 (객체를 만드는 방법): 클래스 생성과 동시에 객체가 만들어 져요(만드는 동시에 객체: 한 번 밖에) (JSON 방식)
	 1.1 리터럴 방식 >> 제일 간단한 방법 > var obj = {}; // var objarr = [] 배열
	 1.2 JSON 표기 : {} >> JSON: JavaScript Object Notation
	 ex) var myObj = { "name":"John", "age":31, "city":"New York" }; // name: member field, John: value
	 TIP) JSON >> XML (텍스트 기반의 형식화된 문서 제공) // 방화벽에 걸리지 않음
	 OS 관계 없이 모두 읽을 수 있는 파일은 txt
	 XML :이기종간의 데이터 호환  (한 때는 서점 : xml webservice)
	 무거운 XML의 단점을 보완하기 위해 JSON
	 
	 다른 이야기 
	 객체지향언어 장점 : 설계도 (재사용성)
	 
	 *오브젝트 리터럴 방식 : 재사용을 지원하는 않는다 
	 *설계도를 생성과 동시에 객체 생성(장점 : 편하고 , 빠르다 )(설계도 당 객체 하나)
	 *설계도를 미리 만들어 놓고 재사용하는 방식은 아니다
	 *설계도당 하나의 객체만 생성 사용 (only object)

	 var product = {};
	 var product2 = {제품명:'사과',년도:'2018',원산지:'대구'};
	 
	 var 인스턴스 ={
	       프로퍼티:초기값,
	       프로퍼티:초기값,
	     .....
	     메서드:function(){},
	     메서드:function(){}....
	              }
	        리터럴 방식 > 선언과 동시에 인스턴스 자동 생성
	    var 인스턴스 = {}
	        특징 : 생성자 존재하지 않는다.
	                   프로퍼티와 메서드만 정의 가능
	        단점 : 객체 하나 생성(재사용성 없다)  
	        접근방법 : 인스턴스이름.자원 >> product2.제품명
	*/
	
	var product = {제품명:'사과', 년도:'2018', 원산지:'대구'}; // 변수명은 "" 해도 되고 안 해도 된다
	console.log(product);
	document.write(product.제품명 + "<br>");
	document.write(product.원산지 + "<br>");
	document.write(product.년도 + "<br>");
	document.write(product.toString() + "<br>");
	
	var person = { // JSON(리터럴 방식) 표기법
			name:"홍길동",
			addr:'서울시 강남구 역삼동',
			eat:function(food) {
				document.write(this.name + " / " + this.addr + " / " + food + "냠냠" + "<br>"); // member field의 접근은 this로 한다
			}
	}
	
	document.write("<hr>");
	person.eat("apple");
	
	// 1. 속성 제거
	// var product = {제품명:'사과', 년도:'2018', 원산지:'대구'};
		delete(product.년도);
		
	// for (var index in Array) { arr[index] } // 배일이면 무조건 index
	
	// JSON: { 키:값, 키:값, ... } // 키와 값을 한 쌍으로 갖는 배열로 본다
	for (var key in product) { // 무조건 변수명 key 사용
		console.log("key: " + key);
		console.log("value: " + product[key]);
	}
	
	// person >> method
	for (var key in person) {
		console.log("key: " + key + " = " + person[key]); // 함수의 값은 전체가 나온다
	}
	</script>
</head>
<body>
	
</body>
</html>